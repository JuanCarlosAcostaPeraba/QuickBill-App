---
import Layout from '@/layouts/Layout.astro'

import Header from '@/components/Header.astro'
import DashboardSection from '@/sections/DashboardSection.astro'
import InvoicesSection from '@/sections/InvoicesSection.astro'
import OverdueSection from '@/sections/OverdueSection.astro'

import { auth } from '@/firebase/firebase'

const userSession = auth.currentUser?.uid
const userName = auth.currentUser?.displayName
---

<Layout
	title="QuickBill - Invoice Management"
	description="QuickBill is a simple, open-source invoice management system built with Astro and Firebase. Easily manage your invoices, clients, and payments.">
	<Header />
	<main class="container mx-auto px-4 py-8 space-y-8">
		<div id="user-session" data-uid={userSession}></div>
		<DashboardSection />
		<OverdueSection />
		<InvoicesSection />
	</main>
	<script>
		import { getAllDataForUser } from '@/firebase/firebase'
		import {
			createChart,
			HistogramSeries,
		} from 'https://cdn.jsdelivr.net/npm/lightweight-charts@5.0.7/+esm'

		const userSession = document.getElementById('user-session')?.dataset.uid

		function listOverdueClients(allData: any) {
			const overdueCards = document.querySelector('#overdueClientsCards')

			let dictOverdueClients = {}

			allData.clients.forEach((client) => {
				dictOverdueClients[client.id] = {
					name: client.companyName,
					amount: 0,
					currency: '',
				}
			})

			allData.invoices.forEach((invoice) => {
				if (invoice.status === 'Overdue') {
					const client = dictOverdueClients[invoice.clientId]
					if (client) {
						client.amount += invoice.totalAmount
						client.currency = invoice.currency
					}
				}
			})

			dictOverdueClients = Object.values(dictOverdueClients).filter(
				(client) => client.amount > 0
			)
			dictOverdueClients.sort((a, b) => b.amount - a.amount)

			overdueCards.innerHTML = dictOverdueClients
				.map(
					(client) => `
				<div class="card flex flex-col justify-between bg-white border border-gray-200 rounded-xl shadow hover:shadow-lg hover:scale-[1.03] transition-all p-4 h-36">
					<div class="flex items-center gap-3 mb-2">
						<div class="text-base font-bold text-gray-900 truncate">
							${client.name}
						</div>
					</div>
					<div class="mt-auto">
						<span class="inline-block bg-red-100 text-red-700 px-4 py-1 rounded-lg font-mono font-semibold text-lg shadow">
							${client.amount.toFixed(2)} ${client.currency}
						</span>
					</div>
				</div>
			`
				)
				.join('')
		}

		function listAllInvoices(allData: any) {
			const invoiceGrid = document.querySelector('#invoiceGrid')
			const invoiceGridData = allData.invoices.map((invoice) => {
				const client = allData.clients.find(
					(client) => client.id === invoice.clientId
				)
				return {
					client: client.companyName,
					issued: new Date(invoice.issued).toLocaleDateString(),
					total: `${invoice.totalAmount}${invoice.currency}`,
					status: invoice.status,
				}
			})
			invoiceGrid.data = invoiceGridData
		}

		await getAllDataForUser(userSession)
			.then((allData) => {
				listOverdueClients(allData)
				listAllInvoices(allData)
			})
			.catch((error) => {})

		const data = [
			{ time: '2023-01-01', value: 10 },
			{ time: '2023-01-02', value: 15 },
			{ time: '2023-01-03', value: 20 },
			{ time: '2023-01-04', value: 25 },
			{ time: '2023-01-05', value: 30 },
			{ time: '2023-01-06', value: 35 },
			{ time: '2023-01-07', value: 40 },
			{ time: '2023-01-08', value: 45 },
			{ time: '2023-01-09', value: 50 },
			{ time: '2023-01-10', value: 55 },
		]

		const chartOptions = {
			layout: {
				textColor: 'black',
				background: { type: 'solid', color: 'white' },
			},
		}

		const chart = createChart(
			document.getElementById('container'),
			chartOptions
		)
		const histogramSeries = chart.addSeries(HistogramSeries, {
			color: '#26a69a',
		})

		histogramSeries.setData(data)

		chart.timeScale().fitContent()
	</script>
</Layout>
